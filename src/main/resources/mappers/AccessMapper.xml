<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liumapp.demo.security.mapper.AccessMapper">
  <resultMap id="BaseResultMap" type="com.liumapp.demo.security.domain.Access">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="fid" jdbcType="BIGINT" property="fid" />
    <result column="module" jdbcType="VARCHAR" property="module" />
    <result column="controller" jdbcType="VARCHAR" property="controller" />
    <result column="function" jdbcType="VARCHAR" property="function" />
    <result column="creatAt" jdbcType="TIMESTAMP" property="creatat" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, fid, module, controller, function, creatAt
  </sql>
  <select id="selectByExample" parameterType="com.liumapp.demo.security.domain.AccessExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from access
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from access
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from access
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.liumapp.demo.security.domain.AccessExample">
    delete from access
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.liumapp.demo.security.domain.Access">
    insert into access (id, fid, module, 
      controller, function, creatAt
      )
    values (#{id,jdbcType=BIGINT}, #{fid,jdbcType=BIGINT}, #{module,jdbcType=VARCHAR}, 
      #{controller,jdbcType=VARCHAR}, #{function,jdbcType=VARCHAR}, #{creatat,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.liumapp.demo.security.domain.Access">
    insert into access
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="fid != null">
        fid,
      </if>
      <if test="module != null">
        module,
      </if>
      <if test="controller != null">
        controller,
      </if>
      <if test="function != null">
        function,
      </if>
      <if test="creatat != null">
        creatAt,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="fid != null">
        #{fid,jdbcType=BIGINT},
      </if>
      <if test="module != null">
        #{module,jdbcType=VARCHAR},
      </if>
      <if test="controller != null">
        #{controller,jdbcType=VARCHAR},
      </if>
      <if test="function != null">
        #{function,jdbcType=VARCHAR},
      </if>
      <if test="creatat != null">
        #{creatat,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.liumapp.demo.security.domain.AccessExample" resultType="java.lang.Long">
    select count(*) from access
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update access
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.fid != null">
        fid = #{record.fid,jdbcType=BIGINT},
      </if>
      <if test="record.module != null">
        module = #{record.module,jdbcType=VARCHAR},
      </if>
      <if test="record.controller != null">
        controller = #{record.controller,jdbcType=VARCHAR},
      </if>
      <if test="record.function != null">
        function = #{record.function,jdbcType=VARCHAR},
      </if>
      <if test="record.creatat != null">
        creatAt = #{record.creatat,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update access
    set id = #{record.id,jdbcType=BIGINT},
      fid = #{record.fid,jdbcType=BIGINT},
      module = #{record.module,jdbcType=VARCHAR},
      controller = #{record.controller,jdbcType=VARCHAR},
      function = #{record.function,jdbcType=VARCHAR},
      creatAt = #{record.creatat,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.liumapp.demo.security.domain.Access">
    update access
    <set>
      <if test="fid != null">
        fid = #{fid,jdbcType=BIGINT},
      </if>
      <if test="module != null">
        module = #{module,jdbcType=VARCHAR},
      </if>
      <if test="controller != null">
        controller = #{controller,jdbcType=VARCHAR},
      </if>
      <if test="function != null">
        function = #{function,jdbcType=VARCHAR},
      </if>
      <if test="creatat != null">
        creatAt = #{creatat,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.liumapp.demo.security.domain.Access">
    update access
    set fid = #{fid,jdbcType=BIGINT},
      module = #{module,jdbcType=VARCHAR},
      controller = #{controller,jdbcType=VARCHAR},
      function = #{function,jdbcType=VARCHAR},
      creatAt = #{creatat,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>